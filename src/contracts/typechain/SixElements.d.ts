/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SixElementsInterface extends ethers.utils.Interface {
  functions: {
    "BASE_MAP_H()": FunctionFragment;
    "BASE_MAP_W()": FunctionFragment;
    "BASE_SUMMON_ENERGY()": FunctionFragment;
    "ENERGY_PRICE()": FunctionFragment;
    "MAX_ENTER_COUNT_PER_BLOCK()": FunctionFragment;
    "MAX_MAP_H()": FunctionFragment;
    "MAX_MAP_W()": FunctionFragment;
    "MAX_UNIT_COUNT()": FunctionFragment;
    "appendUnits(uint8,uint8,uint8)": FunctionFragment;
    "attack(uint8,uint8,uint8,uint8)": FunctionFragment;
    "buyEnergy()": FunctionFragment;
    "changeDevSupporter(address)": FunctionFragment;
    "changeDeveloper(address)": FunctionFragment;
    "createArmy(uint8,uint8,uint8,uint8)": FunctionFragment;
    "devSupporter()": FunctionFragment;
    "developer()": FunctionFragment;
    "energies(address)": FunctionFragment;
    "energySupported(uint256,address,address)": FunctionFragment;
    "energyTaken(uint256,address)": FunctionFragment;
    "energyUsed(uint256,address)": FunctionFragment;
    "enterCountsPerBlock(uint256)": FunctionFragment;
    "map(uint256,uint256)": FunctionFragment;
    "mapHeight()": FunctionFragment;
    "mapWidth()": FunctionFragment;
    "occupyCounts(uint256,address)": FunctionFragment;
    "rewards(uint256)": FunctionFragment;
    "season()": FunctionFragment;
    "support(address,uint256)": FunctionFragment;
    "supporterWithdraw(uint256)": FunctionFragment;
    "supporterWithdrawns(uint256,address)": FunctionFragment;
    "winners(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASE_MAP_H",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_MAP_W",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_SUMMON_ENERGY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENERGY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_ENTER_COUNT_PER_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_MAP_H", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_MAP_W", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_UNIT_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "appendUnits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "attack",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buyEnergy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeDevSupporter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDeveloper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createArmy",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "devSupporter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(functionFragment: "energies", values: [string]): string;
  encodeFunctionData(
    functionFragment: "energySupported",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "energyTaken",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "energyUsed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterCountsPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "map",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mapHeight", values?: undefined): string;
  encodeFunctionData(functionFragment: "mapWidth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "occupyCounts",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "season", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "support",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supporterWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supporterWithdrawns",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "winners",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BASE_MAP_H", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BASE_MAP_W", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASE_SUMMON_ENERGY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENERGY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_ENTER_COUNT_PER_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_MAP_H", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_MAP_W", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_UNIT_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appendUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "attack", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyEnergy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDevSupporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createArmy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devSupporter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "energies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "energySupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "energyTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "energyUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterCountsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "map", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapHeight", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapWidth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "occupyCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "season", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "support", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supporterWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supporterWithdrawns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;

  events: {
    "AppendUnits(address,uint8,uint8,uint8)": EventFragment;
    "Attack(address,uint8,uint8,uint8,uint8)": EventFragment;
    "BuyEnergy(address,uint256)": EventFragment;
    "CreateArmy(address,uint8,uint8,uint8,uint8)": EventFragment;
    "EndSeason(uint256,address)": EventFragment;
    "JoinGame(address,uint8,uint8,uint8,uint8)": EventFragment;
    "Support(address,address,uint256)": EventFragment;
    "UseEnergy(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppendUnits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Attack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyEnergy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateArmy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndSeason"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Support"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UseEnergy"): EventFragment;
}

export class SixElements extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SixElementsInterface;

  functions: {
    BASE_MAP_H(overrides?: CallOverrides): Promise<[number]>;

    "BASE_MAP_H()"(overrides?: CallOverrides): Promise<[number]>;

    BASE_MAP_W(overrides?: CallOverrides): Promise<[number]>;

    "BASE_MAP_W()"(overrides?: CallOverrides): Promise<[number]>;

    BASE_SUMMON_ENERGY(overrides?: CallOverrides): Promise<[number]>;

    "BASE_SUMMON_ENERGY()"(overrides?: CallOverrides): Promise<[number]>;

    ENERGY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ENERGY_PRICE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_ENTER_COUNT_PER_BLOCK(overrides?: CallOverrides): Promise<[number]>;

    "MAX_ENTER_COUNT_PER_BLOCK()"(overrides?: CallOverrides): Promise<[number]>;

    MAX_MAP_H(overrides?: CallOverrides): Promise<[number]>;

    "MAX_MAP_H()"(overrides?: CallOverrides): Promise<[number]>;

    MAX_MAP_W(overrides?: CallOverrides): Promise<[number]>;

    "MAX_MAP_W()"(overrides?: CallOverrides): Promise<[number]>;

    MAX_UNIT_COUNT(overrides?: CallOverrides): Promise<[number]>;

    "MAX_UNIT_COUNT()"(overrides?: CallOverrides): Promise<[number]>;

    appendUnits(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "appendUnits(uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    attack(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "attack(uint8,uint8,uint8,uint8)"(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buyEnergy(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "buyEnergy()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    changeDevSupporter(
      newDevSupporter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeDevSupporter(address)"(
      newDevSupporter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeDeveloper(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeDeveloper(address)"(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createArmy(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createArmy(uint8,uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    devSupporter(overrides?: CallOverrides): Promise<[string]>;

    "devSupporter()"(overrides?: CallOverrides): Promise<[string]>;

    developer(overrides?: CallOverrides): Promise<[string]>;

    "developer()"(overrides?: CallOverrides): Promise<[string]>;

    energies(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "energies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    energySupported(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "energySupported(uint256,address,address)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    energyTaken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "energyTaken(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    energyUsed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "energyUsed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    enterCountsPerBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "enterCountsPerBlock(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    map(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber] & {
        kind: number;
        unitCount: number;
        owner: string;
        blockNumber: BigNumber;
      }
    >;

    "map(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber] & {
        kind: number;
        unitCount: number;
        owner: string;
        blockNumber: BigNumber;
      }
    >;

    mapHeight(overrides?: CallOverrides): Promise<[number]>;

    "mapHeight()"(overrides?: CallOverrides): Promise<[number]>;

    mapWidth(overrides?: CallOverrides): Promise<[number]>;

    "mapWidth()"(overrides?: CallOverrides): Promise<[number]>;

    occupyCounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "occupyCounts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    season(overrides?: CallOverrides): Promise<[BigNumber]>;

    "season()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    support(
      to: string,
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "support(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    supporterWithdraw(
      targetSeason: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "supporterWithdraw(uint256)"(
      targetSeason: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supporterWithdrawns(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supporterWithdrawns(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    winners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "winners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  BASE_MAP_H(overrides?: CallOverrides): Promise<number>;

  "BASE_MAP_H()"(overrides?: CallOverrides): Promise<number>;

  BASE_MAP_W(overrides?: CallOverrides): Promise<number>;

  "BASE_MAP_W()"(overrides?: CallOverrides): Promise<number>;

  BASE_SUMMON_ENERGY(overrides?: CallOverrides): Promise<number>;

  "BASE_SUMMON_ENERGY()"(overrides?: CallOverrides): Promise<number>;

  ENERGY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  "ENERGY_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_ENTER_COUNT_PER_BLOCK(overrides?: CallOverrides): Promise<number>;

  "MAX_ENTER_COUNT_PER_BLOCK()"(overrides?: CallOverrides): Promise<number>;

  MAX_MAP_H(overrides?: CallOverrides): Promise<number>;

  "MAX_MAP_H()"(overrides?: CallOverrides): Promise<number>;

  MAX_MAP_W(overrides?: CallOverrides): Promise<number>;

  "MAX_MAP_W()"(overrides?: CallOverrides): Promise<number>;

  MAX_UNIT_COUNT(overrides?: CallOverrides): Promise<number>;

  "MAX_UNIT_COUNT()"(overrides?: CallOverrides): Promise<number>;

  appendUnits(
    x: BigNumberish,
    y: BigNumberish,
    unitCount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "appendUnits(uint8,uint8,uint8)"(
    x: BigNumberish,
    y: BigNumberish,
    unitCount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  attack(
    fromX: BigNumberish,
    fromY: BigNumberish,
    toX: BigNumberish,
    toY: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "attack(uint8,uint8,uint8,uint8)"(
    fromX: BigNumberish,
    fromY: BigNumberish,
    toX: BigNumberish,
    toY: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buyEnergy(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "buyEnergy()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  changeDevSupporter(
    newDevSupporter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeDevSupporter(address)"(
    newDevSupporter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeDeveloper(
    newDeveloper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeDeveloper(address)"(
    newDeveloper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createArmy(
    x: BigNumberish,
    y: BigNumberish,
    kind: BigNumberish,
    unitCount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createArmy(uint8,uint8,uint8,uint8)"(
    x: BigNumberish,
    y: BigNumberish,
    kind: BigNumberish,
    unitCount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  devSupporter(overrides?: CallOverrides): Promise<string>;

  "devSupporter()"(overrides?: CallOverrides): Promise<string>;

  developer(overrides?: CallOverrides): Promise<string>;

  "developer()"(overrides?: CallOverrides): Promise<string>;

  energies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "energies(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  energySupported(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "energySupported(uint256,address,address)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  energyTaken(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "energyTaken(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  energyUsed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "energyUsed(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  enterCountsPerBlock(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "enterCountsPerBlock(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  map(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, BigNumber] & {
      kind: number;
      unitCount: number;
      owner: string;
      blockNumber: BigNumber;
    }
  >;

  "map(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, BigNumber] & {
      kind: number;
      unitCount: number;
      owner: string;
      blockNumber: BigNumber;
    }
  >;

  mapHeight(overrides?: CallOverrides): Promise<number>;

  "mapHeight()"(overrides?: CallOverrides): Promise<number>;

  mapWidth(overrides?: CallOverrides): Promise<number>;

  "mapWidth()"(overrides?: CallOverrides): Promise<number>;

  occupyCounts(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  "occupyCounts(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "rewards(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  season(overrides?: CallOverrides): Promise<BigNumber>;

  "season()"(overrides?: CallOverrides): Promise<BigNumber>;

  support(
    to: string,
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "support(address,uint256)"(
    to: string,
    quantity: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  supporterWithdraw(
    targetSeason: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "supporterWithdraw(uint256)"(
    targetSeason: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supporterWithdrawns(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supporterWithdrawns(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  winners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "winners(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BASE_MAP_H(overrides?: CallOverrides): Promise<number>;

    "BASE_MAP_H()"(overrides?: CallOverrides): Promise<number>;

    BASE_MAP_W(overrides?: CallOverrides): Promise<number>;

    "BASE_MAP_W()"(overrides?: CallOverrides): Promise<number>;

    BASE_SUMMON_ENERGY(overrides?: CallOverrides): Promise<number>;

    "BASE_SUMMON_ENERGY()"(overrides?: CallOverrides): Promise<number>;

    ENERGY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "ENERGY_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ENTER_COUNT_PER_BLOCK(overrides?: CallOverrides): Promise<number>;

    "MAX_ENTER_COUNT_PER_BLOCK()"(overrides?: CallOverrides): Promise<number>;

    MAX_MAP_H(overrides?: CallOverrides): Promise<number>;

    "MAX_MAP_H()"(overrides?: CallOverrides): Promise<number>;

    MAX_MAP_W(overrides?: CallOverrides): Promise<number>;

    "MAX_MAP_W()"(overrides?: CallOverrides): Promise<number>;

    MAX_UNIT_COUNT(overrides?: CallOverrides): Promise<number>;

    "MAX_UNIT_COUNT()"(overrides?: CallOverrides): Promise<number>;

    appendUnits(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "appendUnits(uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    attack(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "attack(uint8,uint8,uint8,uint8)"(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyEnergy(overrides?: CallOverrides): Promise<void>;

    "buyEnergy()"(overrides?: CallOverrides): Promise<void>;

    changeDevSupporter(
      newDevSupporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeDevSupporter(address)"(
      newDevSupporter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeDeveloper(
      newDeveloper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeDeveloper(address)"(
      newDeveloper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createArmy(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createArmy(uint8,uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devSupporter(overrides?: CallOverrides): Promise<string>;

    "devSupporter()"(overrides?: CallOverrides): Promise<string>;

    developer(overrides?: CallOverrides): Promise<string>;

    "developer()"(overrides?: CallOverrides): Promise<string>;

    energies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "energies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energySupported(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energySupported(uint256,address,address)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energyTaken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energyTaken(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energyUsed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energyUsed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterCountsPerBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "enterCountsPerBlock(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    map(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber] & {
        kind: number;
        unitCount: number;
        owner: string;
        blockNumber: BigNumber;
      }
    >;

    "map(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, BigNumber] & {
        kind: number;
        unitCount: number;
        owner: string;
        blockNumber: BigNumber;
      }
    >;

    mapHeight(overrides?: CallOverrides): Promise<number>;

    "mapHeight()"(overrides?: CallOverrides): Promise<number>;

    mapWidth(overrides?: CallOverrides): Promise<number>;

    "mapWidth()"(overrides?: CallOverrides): Promise<number>;

    occupyCounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "occupyCounts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    season(overrides?: CallOverrides): Promise<BigNumber>;

    "season()"(overrides?: CallOverrides): Promise<BigNumber>;

    support(
      to: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "support(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supporterWithdraw(
      targetSeason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "supporterWithdraw(uint256)"(
      targetSeason: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supporterWithdrawns(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supporterWithdrawns(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    winners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "winners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    AppendUnits(player: null, x: null, y: null, unitCount: null): EventFilter;

    Attack(
      player: null,
      fromX: null,
      fromY: null,
      toX: null,
      toY: null
    ): EventFilter;

    BuyEnergy(player: null, quantity: null): EventFilter;

    CreateArmy(
      player: null,
      x: null,
      y: null,
      kind: null,
      unitCount: null
    ): EventFilter;

    EndSeason(season: null, winner: null): EventFilter;

    JoinGame(
      player: null,
      x: null,
      y: null,
      kind: null,
      unitCount: null
    ): EventFilter;

    Support(supporter: null, to: null, quantity: null): EventFilter;

    UseEnergy(player: null, quantity: null): EventFilter;
  };

  estimateGas: {
    BASE_MAP_H(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_MAP_H()"(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_MAP_W(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_MAP_W()"(overrides?: CallOverrides): Promise<BigNumber>;

    BASE_SUMMON_ENERGY(overrides?: CallOverrides): Promise<BigNumber>;

    "BASE_SUMMON_ENERGY()"(overrides?: CallOverrides): Promise<BigNumber>;

    ENERGY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "ENERGY_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_ENTER_COUNT_PER_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_ENTER_COUNT_PER_BLOCK()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MAX_MAP_H(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MAP_H()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MAP_W(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_MAP_W()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UNIT_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UNIT_COUNT()"(overrides?: CallOverrides): Promise<BigNumber>;

    appendUnits(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "appendUnits(uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    attack(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "attack(uint8,uint8,uint8,uint8)"(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    buyEnergy(overrides?: PayableOverrides): Promise<BigNumber>;

    "buyEnergy()"(overrides?: PayableOverrides): Promise<BigNumber>;

    changeDevSupporter(
      newDevSupporter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeDevSupporter(address)"(
      newDevSupporter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeDeveloper(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeDeveloper(address)"(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createArmy(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createArmy(uint8,uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    devSupporter(overrides?: CallOverrides): Promise<BigNumber>;

    "devSupporter()"(overrides?: CallOverrides): Promise<BigNumber>;

    developer(overrides?: CallOverrides): Promise<BigNumber>;

    "developer()"(overrides?: CallOverrides): Promise<BigNumber>;

    energies(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "energies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energySupported(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energySupported(uint256,address,address)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energyTaken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energyTaken(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    energyUsed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "energyUsed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterCountsPerBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "enterCountsPerBlock(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    map(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "map(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mapHeight(overrides?: CallOverrides): Promise<BigNumber>;

    "mapHeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    mapWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "mapWidth()"(overrides?: CallOverrides): Promise<BigNumber>;

    occupyCounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "occupyCounts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    season(overrides?: CallOverrides): Promise<BigNumber>;

    "season()"(overrides?: CallOverrides): Promise<BigNumber>;

    support(
      to: string,
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "support(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    supporterWithdraw(
      targetSeason: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "supporterWithdraw(uint256)"(
      targetSeason: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supporterWithdrawns(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supporterWithdrawns(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "winners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_MAP_H(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BASE_MAP_H()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_MAP_W(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BASE_MAP_W()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BASE_SUMMON_ENERGY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BASE_SUMMON_ENERGY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ENERGY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ENERGY_PRICE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_ENTER_COUNT_PER_BLOCK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MAX_ENTER_COUNT_PER_BLOCK()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_MAP_H(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_MAP_H()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_MAP_W(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_MAP_W()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_UNIT_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_UNIT_COUNT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appendUnits(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "appendUnits(uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    attack(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "attack(uint8,uint8,uint8,uint8)"(
      fromX: BigNumberish,
      fromY: BigNumberish,
      toX: BigNumberish,
      toY: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buyEnergy(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "buyEnergy()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    changeDevSupporter(
      newDevSupporter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeDevSupporter(address)"(
      newDevSupporter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeDeveloper(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeDeveloper(address)"(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createArmy(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createArmy(uint8,uint8,uint8,uint8)"(
      x: BigNumberish,
      y: BigNumberish,
      kind: BigNumberish,
      unitCount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    devSupporter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devSupporter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "developer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    energies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "energies(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    energySupported(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "energySupported(uint256,address,address)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    energyTaken(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "energyTaken(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    energyUsed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "energyUsed(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enterCountsPerBlock(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "enterCountsPerBlock(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    map(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "map(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mapHeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mapHeight()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mapWidth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mapWidth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    occupyCounts(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "occupyCounts(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    season(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "season()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    support(
      to: string,
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "support(address,uint256)"(
      to: string,
      quantity: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    supporterWithdraw(
      targetSeason: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "supporterWithdraw(uint256)"(
      targetSeason: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supporterWithdrawns(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supporterWithdrawns(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "winners(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
